# --- ai.py ---
# Application Streamlit pour aider √† planifier des projections de films
# -*- coding: utf-8 -*-

import streamlit as st
import json
import openai
from openai import OpenAI
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut, GeocoderUnavailable
from geopy.distance import geodesic # Utilise geodesic pour des distances plus pr√©cises
import folium
from streamlit_folium import st_folium # Pour mieux int√©grer Folium dans Streamlit
import os
import pandas as pd
import uuid
import io # Ajout√© pour le buffer Excel en m√©moire
import unicodedata
import re

# --- CONFIGURATION DE LA PAGE (DOIT √äTRE LA PREMI√àRE COMMANDE STREAMLIT) ---
st.set_page_config(layout="wide", page_title="Assistant Cin√©ma MK2", page_icon="üó∫Ô∏è")

# --- Initialisation des √©tats de session ---
if 'analyse_contexte_done' not in st.session_state:
    st.session_state.analyse_contexte_done = False
if 'recherche_cinemas_done' not in st.session_state:
    st.session_state.recherche_cinemas_done = False
if 'contexte_result' not in st.session_state:
    st.session_state.contexte_result = None
if 'instructions_ia' not in st.session_state:
    st.session_state.instructions_ia = None
if 'reponse_brute_ia' not in st.session_state:
    st.session_state.reponse_brute_ia = None
if 'liste_groupes_resultats' not in st.session_state:
    st.session_state.liste_groupes_resultats = []
if 'dataframes_to_export' not in st.session_state:
    st.session_state.dataframes_to_export = {}
if 'modifications_appliquees' not in st.session_state:
    st.session_state.modifications_appliquees = False

# --- Configuration (Variables globales) ---
GEOCATED_CINEMAS_FILE = "cinemas_groupedBig.json"
GEOCODER_USER_AGENT = "CinemaMapApp/1.0 (App)"
GEOCODER_TIMEOUT = 10

# --- Initialisation du client OpenAI ---
try:
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    if not client.api_key:
        st.error("La cl√© API OpenAI n'a pas √©t√© trouv√©e. Veuillez d√©finir la variable d'environnement OPENAI_API_KEY.")
        st.stop()
except Exception as e:
    st.error(f"Erreur lors de l'initialisation du client OpenAI : {e}")
    st.stop()

# --- Chargement des donn√©es des cin√©mas pr√©-g√©ocod√©es ---
cinemas_ignored_info = None
try:
    with open(GEOCATED_CINEMAS_FILE, "r", encoding="utf-8") as f:
        cinemas_data = json.load(f)
    original_count = len(cinemas_data)
    cinemas_data = [c for c in cinemas_data if c.get('lat') is not None and c.get('lon') is not None]
    valid_count = len(cinemas_data)
    if original_count > valid_count:
        cinemas_ignored_info = f"{original_count - valid_count} cin√©mas sans coordonn√©es valides ont √©t√© ignor√©s lors du chargement."
except FileNotFoundError:
    st.error(f"ERREUR : Le fichier de donn√©es '{GEOCATED_CINEMAS_FILE}' est introuvable.")
    st.error("Veuillez ex√©cuter le script 'preprocess_cinemas.py' pour g√©n√©rer ce fichier.")
    st.stop()
except json.JSONDecodeError:
    st.error(f"ERREUR : Le fichier de donn√©es '{GEOCATED_CINEMAS_FILE}' contient un JSON invalide.")
    st.stop()
except Exception as e:
    st.error(f"Erreur inattendue lors du chargement des donn√©es des cin√©mas : {e}")
    st.stop()

# --- Initialisation du G√©ocodeur (pour les requ√™tes utilisateur) ---
geolocator = Nominatim(user_agent=GEOCODER_USER_AGENT, timeout=GEOCODER_TIMEOUT)

# --- Fonctions ---

@st.cache_data(show_spinner=False)
def analyser_requete_ia(question: str):
    """
    Interpr√®te la requ√™te de l'utilisateur en utilisant GPT-4o pour extraire
    les localisations et la fourchette de spectateurs cible.
    Retourne un tuple (liste_instructions, reponse_brute_ia) ou ([], "") en cas d'√©chec.
    """
    system_prompt = (
        "Tu es un expert en distribution de films en salles en France. L'utilisateur te d√©crit un projet (test, avant-premi√®re, tourn√©e, etc.).\n\n"

        "üéØ Ton objectif : retourner une liste JSON valide de villes avec :\n"
        "- \"localisation\" : une ville en France,\n"
        "- \"nombre\" : nombre de spectateurs √† atteindre,\n"
        "- \"nombre_seances\" : (optionnel) nombre de s√©ances pr√©vues.\n\n"

        "üéØ Si l'utilisateur pr√©cise un nombre de s√©ances et une fourchette de spectateurs (ex : entre 30 000 et 40 000) :\n"
        "- Choisis un total r√©aliste dans cette fourchette,\n"
        "- R√©partis ce total entre les villes proportionnellement au nombre de s√©ances,\n"
        "- Ne d√©passe jamais le maximum, et ne descends jamais en dessous du minimum.\n\n"

        "üéØ Si l'utilisateur pr√©cise seulement une fourchette de spectateurs pour une zone :\n"
        "- Choisis un total dans la fourchette,\n"
        "- R√©partis les spectateurs √©quitablement entre les villes de cette zone,\n"
        "- Suppose 1 s√©ance par ville sauf indication contraire.\n\n"

        "üéØ Si plusieurs zones sont mentionn√©es, g√©n√®re plusieurs blocs JSON.\n\n"

        "üó∫Ô∏è Pour les zones vagues, utilise les remplacements suivants :\n"
        "- 'idf', '√Æle-de-france', 'r√©gion parisienne' ‚Üí ['√Æle-de-france']\n"
        "- 'sud', 'paca', 'sud de la France', 'provence' ‚Üí ['Marseille', 'Toulouse', 'Nice']\n"
        "- 'nord', 'hauts-de-france' ‚Üí ['Lille']\n"
        "- 'ouest', 'bretagne', 'normandie' ‚Üí ['Nantes', 'Rennes', 'Amiens']\n"
        "- 'est', 'grand est', 'alsace' ‚Üí ['Strasbourg']\n"
        "- 'centre', 'centre-val de loire', 'auvergne' ‚Üí ['Clermont-Ferrand']\n"
        "- 'France enti√®re', 'toute la France', 'province', 'le territoire', 'le reste du territoire fran√ßais' ‚Üí [\n"
        "   '√éle-de-france', 'Lille', 'Strasbourg', 'Lyon', 'Marseille', 'Nice',\n"
        "   'Toulouse', 'Montpellier', 'Bordeaux', 'Limoges', 'Nantes', 'Rennes',\n"
        "   'Caen', 'Dijon', 'Clermont-Ferrand', 'Orl√©ans', 'Besan√ßon'\n"
        "]\n\n"

        "üí° Le r√©sultat doit √™tre une **liste JSON strictement valide** :\n"
        "- Format : [{\"localisation\": \"Paris\", \"nombre\": 1000, \"nombre_seances\": 10}]\n"
        "- Utilise des guillemets doubles,\n"
        "- Mets des virgules entre les paires cl√©/valeur,\n"
        "- Ne retourne **aucun texte en dehors** du JSON.\n\n"

        "üí° Si aucun lieu ni objectif n'est identifiable, retourne simplement : []\n\n"

        "üîê R√®gle obligatoire :\n"
        "- Le **nombre total de s√©ances** (addition des \"nombre_seances\") doit correspondre **exactement** √† ce que demande l'utilisateur,\n"
        "- Ne t'arr√™te pas √† une distribution ronde ou facile : ajuste si besoin pour que la somme soit strictement exacte."
        "üîê R√®gle stricte sur la fourchette :\n"
        "- Si l'utilisateur donne une fourchette de spectateurs (ex : minimum 30 000, maximum 160 000),\n"
        "- Alors le **nombre total de spectateurs** (toutes zones confondues) doit rester **strictement dans cette fourchette**.\n"
        "- Tu ne dois **pas appliquer cette fourchette √† une seule zone**, mais √† l'ensemble de la demande.\n"
    )

    raw_response = ""
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question}
            ]
        )
        raw_response = response.choices[0].message.content.strip()
        try:
            data = json.loads(raw_response)
            if isinstance(data, dict) and "message" in data:
                st.warning(f"‚ö†Ô∏è L'IA a r√©pondu : {data['message']}")
                return [], raw_response
            if isinstance(data, dict) and 'localisation' in data and 'nombre' in data:
                localisation = str(data['localisation']).strip()
                try: nombre = int(data['nombre'])
                except ValueError: nombre = 0
                result = [{"localisation": localisation, "nombre": nombre}]
                if 'nombre_seances' in data:
                    try: result[0]['nombre_seances'] = int(data['nombre_seances'])
                    except (ValueError, TypeError): pass
                return result, raw_response
            elif isinstance(data, list):
                valid_data = []
                all_valid = True
                for item in data:
                    if isinstance(item, dict) and 'localisation' in item and 'nombre' in item:
                        try: item['nombre'] = int(item['nombre'])
                        except (ValueError, TypeError): item['nombre'] = 0; all_valid = False
                        if 'nombre_seances' in item:
                            try: item['nombre_seances'] = int(item['nombre_seances'])
                            except (ValueError, TypeError):
                                if 'nombre_seances' in item: del item['nombre_seances']
                        valid_data.append(item)
                    else:
                        all_valid = False
                if not all_valid:
                     st.warning("Certains √©l√©ments retourn√©s par l'IA n'ont pas le format attendu (localisation/nombre).")
                return valid_data, raw_response
            elif isinstance(data, dict):
                potential_keys = ['resultats', 'projections', 'locations', 'intentions', 'data', 'result']
                for key in potential_keys:
                    if key in data and isinstance(data[key], list):
                        extracted = data[key]
                        valid_data = []
                        all_valid = True
                        for item in extracted:
                           if isinstance(item, dict) and 'localisation' in item and 'nombre' in item:
                                try: item['nombre'] = int(item['nombre'])
                                except (ValueError, TypeError): item['nombre'] = 0; all_valid = False
                                if 'nombre_seances' in item:
                                    try: item['nombre_seances'] = int(item['nombre_seances'])
                                    except (ValueError, TypeError):
                                        if 'nombre_seances' in item: del item['nombre_seances']
                                valid_data.append(item)
                           else:
                                all_valid = False
                        if not all_valid:
                             st.warning("Certains √©l√©ments (dans un objet) retourn√©s par l'IA n'ont pas le format attendu.")
                        return valid_data, raw_response
                st.warning("L'IA a retourn√© un objet, mais aucune structure attendue (liste d'intentions) n'a √©t√© trouv√©e.")
                return [], raw_response
            else:
                st.warning("La r√©ponse n'est ni une liste ni un dictionnaire exploitable.")
                return [], raw_response
        except json.JSONDecodeError:
            st.warning("La r√©ponse n'√©tait pas un JSON valide, tentative d'extraction manuelle...")
            try:
                json_part = raw_response[raw_response.find("["):raw_response.rfind("]")+1]
                extracted = json.loads(json_part)
                valid_data = []
                all_valid = True
                for item in extracted:
                   if isinstance(item, dict) and 'localisation' in item and 'nombre' in item:
                        try: item['nombre'] = int(item['nombre'])
                        except (ValueError, TypeError): item['nombre'] = 0; all_valid = False
                        if 'nombre_seances' in item:
                            try: item['nombre_seances'] = int(item['nombre_seances'])
                            except (ValueError, TypeError):
                                if 'nombre_seances' in item: del item['nombre_seances']
                        valid_data.append(item)
                   else:
                        all_valid = False
                if not all_valid:
                     st.warning("Le JSON extrait manuellement n'a pas le bon format pour tous les √©l√©ments.")
                return valid_data, raw_response
            except Exception:
                st.error("Impossible d'interpr√©ter la r√©ponse de l'IA.")
                return [], raw_response
    except openai.APIError as e:
        st.error(f"Erreur OpenAI : {e}")
        return [], raw_response
    except Exception as e:
        st.error(f"Erreur inattendue : {e}")
        return [], raw_response

def geo_localisation(adresse: str):
    """
    Tente de trouver les coordonn√©es (latitude, longitude) pour une adresse donn√©e
    en utilisant Nominatim. Affiche les erreurs/warnings directement dans Streamlit.
    Retourne un tuple (lat, lon) ou None si introuvable ou en cas d'erreur.
    """
    corrections = {
        "r√©gion parisienne": "Paris, France", "idf": "Paris, France", "√Æle-de-france": "Paris, France", "ile de france": "Paris, France",
        "sud": "Marseille, France", "le sud": "Marseille, France", "paca": "Marseille, France", "provence-alpes-c√¥te d'azur": "Marseille, France",
        "nord": "Lille, France", "le nord": "Lille, France", "hauts-de-france": "Lille, France",
        "bretagne": "Rennes, France", "c√¥te d'azur": "Nice, France",
        "rh√¥ne-alpes": "Lyon, France", "auvergne-rh√¥ne-alpes": "Lyon, France",
        "aquitaine": "Bordeaux, France", "nouvelle-aquitaine": "Bordeaux, France",
        "alsace": "Strasbourg, France", "grand est": "Strasbourg, France",
        "france": "Paris, France", "territoire fran√ßais": "Paris, France",
        "ouest": "Nantes, France", "normandie": "Rouen, France",
        "centre": "Orl√©ans, France", "centre-val de loire": "Orl√©ans, France",
        "auvergne": "Clermont-Ferrand, France"
    }
    adresse_norm = adresse.lower().strip()
    adresse_corrigee = corrections.get(adresse_norm, adresse)
    if ", france" not in adresse_corrigee.lower():
        adresse_requete = f"{adresse_corrigee}, France"
    else:
        adresse_requete = adresse_corrigee
    try:
        loc = geolocator.geocode(adresse_requete)
        if loc:
            return (loc.latitude, loc.longitude)
        else:
            st.warning(f"‚ö†Ô∏è Adresse '{adresse_requete}' (issue de '{adresse}') non trouv√©e par le service de g√©olocalisation.")
            return None
    except (GeocoderTimedOut, GeocoderUnavailable) as e:
        st.error(f"‚ùå Erreur de g√©ocodage (timeout/indisponible) pour '{adresse_requete}': {e}")
        return None
    except Exception as e:
        st.error(f"‚ùå Erreur inattendue lors du g√©ocodage de '{adresse_requete}': {e}")
        return None

def trouver_cinemas_proches(localisation_cible: str, spectateurs_voulus: int, nombre_de_salles_voulues: int, rayon_km: int = 50):
    """
    Trouve des cin√©mas proches d'une localisation cible, pour un nombre EXACT de salles.
    Affiche les warnings/infos directement dans Streamlit.
    Retourne list: Liste des salles s√©lectionn√©es.
    """
    point_central_coords = geo_localisation(localisation_cible)
    if not point_central_coords:
        return []

    salles_eligibles = []
    for cinema in cinemas_data:
        lat, lon = cinema.get('lat'), cinema.get('lon')
        if lat is None or lon is None: continue
        try:
            distance = geodesic(point_central_coords, (lat, lon)).km
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erreur calcul distance pour {cinema.get('cinema', 'Inconnu')} : {e}")
            continue
        if distance > rayon_km: continue
        salles = cinema.get("salles", [])
        # Ne garder que les 2 meilleures salles (par capacit√© d√©croissante)
        # Nettoyage : on filtre les salles avec une capacit√© convertible en int
        salles_valides = []
        for s in salles:
            try:
                capacite = int(s.get("capacite", 0))
                if capacite > 0:
                    s["capacite"] = capacite
                    salles_valides.append(s)
            except (ValueError, TypeError):
                continue

        # Tri et limitation √† 2 salles max par cin√©ma
        salles = sorted(salles_valides, key=lambda s: s["capacite"], reverse=True)[:1]
        for salle in salles:
            try: capacite = int(salle.get("capacite", 0))
            except (ValueError, TypeError): continue
            if capacite <= 0: continue # Ignore salles capacit√© nulle
            salles_eligibles.append({
                "cinema": cinema.get("cinema"), "salle": salle.get("salle"),
                "adresse": cinema.get("adresse"), "lat": lat, "lon": lon,
                "capacite": capacite, "distance_km": round(distance, 2),
                "contact": cinema.get("contact", {}),
                "source_localisation": localisation_cible
            })

    if not salles_eligibles:
        st.warning(f"Aucune salle trouv√©e pour '{localisation_cible}' dans un rayon de {rayon_km} km.")
        return []

    salles_eligibles.sort(key=lambda x: (x["distance_km"], -x["capacite"]))

    if len(salles_eligibles) < nombre_de_salles_voulues:
         st.warning(f"‚ö†Ô∏è Seulement {len(salles_eligibles)} salle(s) trouv√©e(s) pour '{localisation_cible}' (au lieu de {nombre_de_salles_voulues} demand√©es).")
         resultats = salles_eligibles
    else:
        resultats = salles_eligibles[:nombre_de_salles_voulues]

    return resultats

def generer_carte_folium(groupes_de_cinemas: list):
    """
    Cr√©e une carte Folium affichant les cin√©mas trouv√©s, regroup√©s par couleur.
    Retourne folium.Map or None.
    """
    tous_les_cinemas = [cinema for groupe in groupes_de_cinemas for cinema in groupe.get("resultats", [])]
    if not tous_les_cinemas: return None

    avg_lat = sum(c['lat'] for c in tous_les_cinemas) / len(tous_les_cinemas)
    avg_lon = sum(c['lon'] for c in tous_les_cinemas) / len(tous_les_cinemas)
    m = folium.Map(location=[avg_lat, avg_lon], zoom_start=6, tiles="CartoDB positron")
    couleurs = ["blue", "green", "red", "purple", "orange", "darkred", "lightred", "beige", "darkblue", "darkgreen", "cadetblue", "lightgray", "black"]

    for idx, groupe in enumerate(groupes_de_cinemas):
        couleur = couleurs[idx % len(couleurs)]
        localisation_origine = groupe.get("localisation", "Inconnue")
        resultats_groupe = groupe.get("resultats", [])
        if resultats_groupe:
            feature_group = folium.FeatureGroup(name=f"{localisation_origine} ({len(resultats_groupe)} salles)")
            for cinema in resultats_groupe:
                contact = cinema.get("contact", {})
                contact_nom, contact_email = contact.get("nom", "N/A"), contact.get("email", "N/A")
                cinema["contact_nom"], cinema["contact_email"] = contact_nom, contact_email # Pour table
                popup_html = (f"<b>{cinema.get('cinema', 'N/A')} - Salle {cinema.get('salle', 'N/A')}</b><br>"
                              f"<i>{cinema.get('adresse', 'N/A')}</i><br>"
                              f"Capacit√© : {cinema.get('capacite', 'N/A')} places<br>"
                              f"Distance ({localisation_origine}) : {cinema.get('distance_km', 'N/A')} km<br>"
                              f"Contact : <b>{contact_nom}</b><br>üìß {contact_email}")
                folium.CircleMarker(
                    location=[cinema['lat'], cinema['lon']], radius=5, color=couleur,
                    fill=True, fill_color=couleur, fill_opacity=0.7,
                    popup=folium.Popup(popup_html, max_width=300)
                ).add_to(feature_group)
            feature_group.add_to(m)
    folium.LayerControl().add_to(m)
    return m

def analyser_contexte_geographique(description_projet: str):
    """
    Analyse le contexte du projet pour sugg√©rer les r√©gions les plus pertinentes
    en fonction du public cible, du th√®me du film, etc.
    Retourne un dictionnaire avec les r√©gions sugg√©r√©es et leur justification.
    """
    system_prompt = (
        "Tu es un expert en distribution cin√©matographique et en analyse d√©mographique en France.\n\n"
        "üéØ Ton objectif : analyser le contexte d'un projet cin√©matographique pour sugg√©rer les r√©gions les plus pertinentes.\n\n"
        "Consid√®re les facteurs suivants :\n"
        "1. Public cible (√¢ge, centres d'int√©r√™t)\n"
        "2. Th√®me du film\n"
        "3. Type d'√©v√©nement (avant-premi√®re, test, etc.)\n"
        "4. Contexte local (activit√©s, industries, centres d'int√©r√™t)\n\n"
        "Retourne un JSON avec :\n"
        "- regions : liste des r√©gions sugg√©r√©es\n"
        "- justification : explication pour chaque r√©gion\n"
        "- public_cible : description du public cible identifi√©\n"
        "- facteurs_cles : liste des facteurs qui ont influenc√© le choix\n\n"
        "Exemple de format de r√©ponse :\n"
        "{\n"
        '  "regions": ["√éle-de-France", "Lyon", "Bordeaux"],\n'
        '  "justification": "Ces r√©gions ont une forte concentration de jeunes urbains et d\'activit√©s li√©es au th√®me",\n'
        '  "public_cible": "Jeunes adultes 18-35 ans, urbains, int√©ress√©s par le th√®me",\n'
        '  "facteurs_cles": ["Population jeune", "Centres urbains", "Activit√©s li√©es au th√®me"]\n'
        "}"
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": description_projet}
            ]
        )
        return json.loads(response.choices[0].message.content.strip())
    except Exception as e:
        st.error(f"Erreur lors de l'analyse du contexte : {e}")
        return None

# --- Fonctions utilitaires ---
def normaliser_nom_ville(nom):
    """
    Normalise un nom de ville/zone pour comparaison¬†: enl√®ve accents, met en minuscules, remplace tirets/underscores par espaces, supprime espaces multiples.
    """
    nom = ''.join(
        c for c in unicodedata.normalize('NFD', nom)
        if unicodedata.category(c) != 'Mn'
    )
    nom = nom.lower()
    nom = re.sub(r"[-_]", " ", nom)
    nom = re.sub(r"\s+", " ", nom)
    nom = nom.strip()
    return nom

# --- Interface Utilisateur Streamlit ---
st.title("üó∫Ô∏è Assistant de Planification Cin√©ma MK2")
st.markdown("D√©crivez votre projet de diffusion et l'IA identifiera les cin√©mas pertinents en France.")

if cinemas_ignored_info:
    st.info(f"‚ÑπÔ∏è {cinemas_ignored_info}")

with st.expander("‚ÑπÔ∏è Comment √ßa marche ?"):
    st.markdown("""
    Cette application vous aide √† planifier des projections de films en identifiant les cin√©mas les plus adapt√©s en France.
    ### üìù 1. D√©crivez votre projet
    Indiquez votre projet en d√©tail : th√®me du film, public cible, type d'√©v√©nement, etc.
    *Exemples :*
    - "Film sur l'automobile par Inoxtag, public jeune"
    - "Documentaire sur l'agriculture bio, public adulte"
    - "Film d'animation pour enfants"
    ### üéØ 2. Analyse du contexte
    L'IA analyse votre projet pour sugg√©rer les r√©gions les plus pertinentes en fonction du public cible et du th√®me.
    ### ü§ñ 3. Planification d√©taill√©e
    Pr√©cisez ensuite votre besoin en langage naturel : lieux, type d'√©v√©nement et public cible.
    ### üîç 4. Recherche de cin√©mas
    Le syst√®me cherche les salles adapt√©es dans les r√©gions sugg√©r√©es.
    ### üó∫Ô∏è 5. Carte interactive
    Une carte Folium affiche les cin√©mas trouv√©s.
    ### üìä 6. Liste des Salles et Export
    - Tableau r√©capitulatif des salles
    - Export Excel disponible
    """)

# Premi√®re √©tape : Analyse du contexte
st.subheader("üéØ Analyse du Contexte")
description_projet = st.text_area(
    "D√©crivez votre projet :",
    placeholder="Ex: Film sur l'automobile par Inoxtag, public jeune, avant-premi√®re",
    key="description_projet"
)

# Bouton pour d√©clencher l'analyse du contexte
if st.button("üîç Analyser le contexte", type="primary"):
    if description_projet:
        with st.spinner("üß† Analyse du contexte par l'IA..."):
            contexte = analyser_contexte_geographique(description_projet)
            st.session_state.contexte_result = contexte
            st.session_state.analyse_contexte_done = True
        st.rerun()
    else:
        st.warning("Veuillez d'abord d√©crire votre projet.")

# Affichage des r√©sultats de l'analyse du contexte
if st.session_state.analyse_contexte_done and st.session_state.contexte_result:
    st.success("‚úÖ Analyse du contexte termin√©e !")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìä Public cible identifi√© :**")
        st.info(st.session_state.contexte_result.get("public_cible", "Non sp√©cifi√©"))
        
        st.markdown("**üéØ Facteurs cl√©s :**")
        for facteur in st.session_state.contexte_result.get("facteurs_cles", []):
            st.markdown(f"- {facteur}")
    
    with col2:
        st.markdown("**üó∫Ô∏è R√©gions sugg√©r√©es :**")
        for region in st.session_state.contexte_result.get("regions", []):
            st.markdown(f"- {region}")
        
        st.markdown("**üí° Justification :**")
        st.info(st.session_state.contexte_result.get("justification", "Non sp√©cifi√©"))
    
    st.markdown("---")
    st.subheader("üìù Planification d√©taill√©e")
    st.info("Maintenant que nous avons identifi√© les r√©gions pertinentes, d√©taillez votre plan de diffusion.")

# Deuxi√®me √©tape : Planification d√©taill√©e
query = st.text_input(
    "Votre plan de diffusion :",
    placeholder="Ex: 5 s√©ances √† Paris (500 pers.) et 2 s√©ances test √† Rennes (100 pers.)",
    key="query_input"
)

# Bouton pour d√©clencher l'analyse de la requ√™te
if st.button("ü§ñ Analyser la requ√™te", type="primary"):
    if query:
        with st.spinner("üß† Interpr√©tation de votre requ√™te par l'IA..."):
            instructions_ia, reponse_brute_ia = analyser_requete_ia(query)
            st.session_state.instructions_ia = instructions_ia
            st.session_state.reponse_brute_ia = reponse_brute_ia
        st.rerun()
    else:
        st.warning("Veuillez d'abord saisir votre plan de diffusion.")

# Affichage des r√©sultats de l'analyse de la requ√™te
if st.session_state.instructions_ia:
    total_spectateurs_estimes = sum(i.get('nombre', 0) for i in st.session_state.instructions_ia)
    total_seances_demandees_ia = sum(i.get("nombre_seances", 0) for i in st.session_state.instructions_ia if "nombre_seances" in i)
    nb_zones = len(st.session_state.instructions_ia)

    # Modifi√© ici : expanded=False pour que l'expander soit ferm√© par d√©faut
    with st.expander("ü§ñ R√©sum√© de la compr√©hension de l'IA", expanded=False):
        resume_text = f"**IA a compris :** {nb_zones} zone(s) de recherche"
        if total_spectateurs_estimes > 0: resume_text += f" pour un objectif total d'environ {total_spectateurs_estimes} spectateurs"
        if total_seances_demandees_ia > 0: resume_text += f" et un total de {total_seances_demandees_ia} s√©ance(s) explicitement demand√©e(s)."
        else: resume_text += "."; st.caption("(Aucun nombre de s√©ances sp√©cifique n'a √©t√© d√©tect√©, une estimation sera faite.)")
        st.info(resume_text)
        st.json(st.session_state.instructions_ia)
        if st.session_state.reponse_brute_ia:
            with st.popover("Voir r√©ponse brute de l'IA"):
                st.code(st.session_state.reponse_brute_ia, language="text")

    # Configuration des rayons de recherche
    st.sidebar.header("‚öôÔ∏è Options de Recherche")
    rayons_par_loc = {}
    for idx, instruction in enumerate(st.session_state.instructions_ia):
        loc = instruction.get('localisation')
        if loc:
             corrections_regionales = ["paris", "lille", "marseille", "toulouse", "nice", "nantes", "rennes", "strasbourg", "clermont-ferrand", "lyon", "bordeaux", "rouen", "orl√©ans"]
             is_large_area_target = loc.lower() in ["marseille", "toulouse", "nice", "lille", "nantes", "rennes", "strasbourg", "clermont-ferrand", "lyon", "bordeaux"] or loc.lower() in ["paris"] and len(st.session_state.instructions_ia) > 1
             default_rayon = 100 if is_large_area_target else 50
             rayon_key = f"rayon_{idx}_{loc}"
             if is_large_area_target: st.sidebar.caption(f"'{loc}' peut couvrir une zone large, rayon par d√©faut ajust√©.")
             rayons_par_loc[loc] = st.sidebar.slider(f"Rayon autour de '{loc}' (km)", 5, 250, default_rayon, 5, key=rayon_key)

    # Bouton pour d√©clencher la recherche des cin√©mas
    if st.button("üîç Rechercher les cin√©mas", type="primary"):
        liste_groupes_resultats = []
        cinemas_trouves_total = 0
        total_seances_estimees_ou_demandees = 0
        dataframes_to_export = {}
        
        st.markdown("---")
        st.subheader("üîç Recherche des cin√©mas...")
        
        with st.spinner(f"Recherche en cours pour {nb_zones} zone(s)..."):
            for instruction in st.session_state.instructions_ia:
                loc = instruction.get('localisation')
                num_spectateurs = instruction.get('nombre')
                if loc and isinstance(num_spectateurs, int) and num_spectateurs >= 0:
                    st.write(f"**Recherche pour : {loc}**")
                    rayon_recherche = rayons_par_loc.get(loc, 50)
                    if "nombre_seances" in instruction and isinstance(instruction["nombre_seances"], int) and instruction["nombre_seances"] > 0:
                        nombre_salles_a_trouver = instruction["nombre_seances"]
                        st.info(f"   -> Objectif : trouver {nombre_salles_a_trouver} salle(s) dans {rayon_recherche} km (cible: {num_spectateurs} spect.).")
                    else:
                        nombre_salles_a_trouver = 1
                        st.info(f"   -> Objectif : trouver {nombre_salles_a_trouver} salle (d√©faut) dans {rayon_recherche} km (cible: {num_spectateurs} spect.).")
                    total_seances_estimees_ou_demandees += nombre_salles_a_trouver
                    resultats_cinemas = trouver_cinemas_proches(loc, num_spectateurs, nombre_salles_a_trouver, rayon_recherche)
                    groupe_actuel = {"localisation": loc, "resultats": resultats_cinemas, "nombre_salles_demandees": nombre_salles_a_trouver}
                    liste_groupes_resultats.append(groupe_actuel)
                    if resultats_cinemas:
                        capacite_trouvee = sum(c['capacite'] for c in resultats_cinemas)
                        st.write(f"   -> Trouv√© {len(resultats_cinemas)} salle(s) (Capacit√© totale: {capacite_trouvee}).")
                        cinemas_trouves_total += len(resultats_cinemas)
                        data_for_df = []
                        for cinema in resultats_cinemas:
                            contact = cinema.get("contact", {})
                            data_for_df.append({
                                "Cin√©ma": cinema.get("cinema", "N/A"), 
                                "Salle": cinema.get("salle", "N/A"),
                                "Adresse": cinema.get("adresse", "N/A"), 
                                "Capacit√©": cinema.get("capacite", 0),
                                "Distance (km)": cinema.get("distance_km", 0), 
                                # Remplacer les deux colonnes par une seule avec les informations combin√©es
                                "Contact": " / ".join(filter(None, [
                                    contact.get("nom", ""), 
                                    contact.get("email", ""), 
                                    contact.get("telephone", "")
                                ])),
                                "Latitude": cinema.get("lat", 0.0),
                                "Longitude": cinema.get("lon", 0.0) 
                            })
                        df = pd.DataFrame(data_for_df)
                        if not df.empty: dataframes_to_export[loc] = df
                    else: st.write(f"   -> Aucune salle trouv√©e pour '{loc}' correspondant aux crit√®res.")
                else: st.warning(f"Instruction IA ignor√©e (format invalide) : {instruction}")
        
        # Sauvegarde des r√©sultats dans la session
        st.session_state.liste_groupes_resultats = liste_groupes_resultats
        st.session_state.dataframes_to_export = dataframes_to_export
        st.session_state.recherche_cinemas_done = True
        st.session_state.modifications_appliquees = False  # R√©initialiser les modifications
        st.rerun()

# Affichage des r√©sultats de la recherche
if st.session_state.recherche_cinemas_done and st.session_state.liste_groupes_resultats:
    st.markdown("---")
    st.subheader("üìä R√©sultats de la Recherche")
    
    total_seances_estimees_ou_demandees = sum(groupe.get("nombre_salles_demandees", 0) for groupe in st.session_state.liste_groupes_resultats)
    cinemas_trouves_total = sum(len(groupe.get("resultats", [])) for groupe in st.session_state.liste_groupes_resultats)
    salles_manquantes = total_seances_estimees_ou_demandees - cinemas_trouves_total
    
    if cinemas_trouves_total > 0:
        if salles_manquantes > 0: st.warning(f"‚ö†Ô∏è Recherche termin√©e. {cinemas_trouves_total} salle(s) trouv√©e(s), mais il en manque {salles_manquantes} sur les {total_seances_estimees_ou_demandees} vis√©e(s).")
        else: st.success(f"‚úÖ Recherche termin√©e ! {cinemas_trouves_total} salle(s) trouv√©e(s), correspondant aux {total_seances_estimees_ou_demandees} s√©ance(s) vis√©e(s).")

        st.subheader("üó∫Ô∏è Carte des Cin√©mas Trouv√©s")
        carte = generer_carte_folium(st.session_state.liste_groupes_resultats)
        if carte:
            map_html_path = "map_output.html"
            carte.save(map_html_path)
            st_folium(carte, width='100%', height=500, key="carte_principale")
            with open(map_html_path, "rb") as f:
                st.download_button("üì• T√©l√©charger la Carte Interactive (HTML)", f, "carte_cinemas.html", "text/html", use_container_width=True, key="download_carte_principale")
            with st.expander("üí° Comment utiliser le fichier HTML ?"):
                  st.markdown("- Double-cliquez sur `carte_cinemas.html`.\n- S'ouvre dans votre navigateur.\n- Carte interactive: zoom, d√©placement, clic sur points.\n- Contr√¥le des couches pour filtrer par zone.\n- Fonctionne hors ligne.")
        else: st.info("G√©n√©ration de la carte annul√©e.")

        st.markdown("---")
        st.subheader("üìã Liste des Salles et Export")

        if st.session_state.dataframes_to_export:
            excel_buffer = io.BytesIO()
            with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
                for loc, df_to_write in st.session_state.dataframes_to_export.items():
                    safe_sheet_name = "".join(c for c in loc if c.isalnum() or c in (' ', '_')).rstrip()[:31]
                    df_to_write.to_excel(writer, sheet_name=safe_sheet_name, index=False)
            st.download_button(
                label="üíæ T√©l√©charger Tous les R√©sultats (Excel)",
                data=excel_buffer.getvalue(),
                file_name=f"resultats_cinemas_{uuid.uuid4()}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True, key="download_all_excel" )

        for groupe in st.session_state.liste_groupes_resultats:
            loc = groupe["localisation"]
            nb_demandes = groupe["nombre_salles_demandees"]
            nb_trouves = len(groupe["resultats"])
            st.markdown(f"**Zone : {loc}** ({nb_trouves}/{nb_demandes} salles trouv√©es)")
            if loc in st.session_state.dataframes_to_export:
                df_display = st.session_state.dataframes_to_export[loc]
                st.dataframe(df_display[["Cin√©ma", "Salle", "Capacit√©", "Distance (km)", "Contact"]], use_container_width=True, hide_index=True)
            elif nb_trouves == 0 : st.caption("Aucune salle trouv√©e pour cette zone.")
            st.divider()
    else:
         st.error("‚ùå Aucun cin√©ma correspondant √† votre demande n'a √©t√© trouv√©.")
         if salles_manquantes > 0: st.info(f"(L'objectif √©tait de trouver {total_seances_estimees_ou_demandees} salle(s).)")

# --- Fin de l'application ---

# Section de raffinage des r√©sultats
if st.session_state.recherche_cinemas_done and st.session_state.liste_groupes_resultats:
    st.markdown("---")
    st.subheader("üîß Raffinage des R√©sultats")
    st.info("Vous pouvez maintenant affiner vos r√©sultats en demandant des modifications sp√©cifiques.")
    
    # Chatbox pour le raffinage
    raffinage_query = st.text_input(
        "Demande de modification :",
        placeholder="Ex: rajoute une salle √† Marseille, supprime les salles de moins de 100 places, ajoute 2 salles √† Paris",
        key="raffinage_input"
    )
    
    if st.button("üîß Appliquer les modifications", type="secondary"):
        if raffinage_query:
            st.write(f"üîç **DEBUG :** Demande de raffinage re√ßue : '{raffinage_query}'")
            st.write(f"üîç **DEBUG :** √âtat initial - Groupes : {len(st.session_state.liste_groupes_resultats)}")
            for i, groupe in enumerate(st.session_state.liste_groupes_resultats):
                st.write(f"üîç **DEBUG :** Groupe {i+1} : {groupe['localisation']} - {len(groupe['resultats'])} salles")
            with st.spinner("üß† Traitement de votre demande de modification..."):
                # Analyse de la demande de raffinage
                system_prompt_raffinage = (
                    "Tu es un expert en analyse de requ√™tes de modification pour une application de planification cin√©matographique.\n\n"
                    "üéØ Ton objectif : analyser une demande de modification et retourner des instructions claires.\n\n"
                    "Types de modifications support√©es :\n"
                    "1. AJOUTER des salles ou s√©ances : 'rajoute X salles √† [ville]', 'ajoute 10 s√©ances √† [ville]', 'ajoute une salle √† [ville]'\n"
                    "2. SUPPRIMER des salles ou s√©ances : 'supprime les salles de moins de X places', 'enl√®ve les salles √† plus de X km', 'supprime les s√©ances √† [ville]'\n"
                    "3. MODIFIER des crit√®res : 'augmente le rayon √† X km pour [ville]', 'cherche des salles de plus de X places'\n\n"
                    "Le terme 's√©ance(s)' doit √™tre compris comme 'salle(s)' dans ce contexte.\n"
                    "Exemples :\n"
                    "- 'ajoute 10 s√©ances √† Paris' => ajouter 10 salles √† Paris\n"
                    "- 'supprime les s√©ances √† Marseille' => supprimer toutes les salles √† Marseille\n"
                    "- 'supprime les salles √† Lyon' => supprimer toutes les salles √† Lyon\n\n"
                    "Retourne un JSON avec :\n"
                    "- action : 'ajouter', 'supprimer', 'modifier'\n"
                    "- localisation : ville concern√©e (si applicable)\n"
                    "- nombre : nombre de salles (pour ajout)\n"
                    "- critere : crit√®re de suppression/modification ('capacite_min', 'capacite_max', 'distance_max')\n"
                    "- valeur : valeur du crit√®re (nombre)\n"
                    "- operateur : 'superieur', 'inferieur', 'egal' (pour clarifier la logique)\n\n"
                    "Exemple :\n"
                    "{\n"
                    '  "action": "ajouter",\n'
                    '  "localisation": "Marseille",\n'
                    '  "nombre": 1\n'
                    "}\n\n"
                    "Pour les suppressions :\n"
                    "{\n"
                    '  "action": "supprimer",\n'
                    '  "critere": "capacite_min",\n'
                    '  "valeur": 100,\n'
                    '  "operateur": "inferieur"\n'
                    "}\n\n"
                    "Pour supprimer toutes les salles d'une ville :\n"
                    "{\n"
                    '  "action": "supprimer",\n'
                    '  "localisation": "Marseille"\n'
                    "}\n\n"
                    "Si la demande n'est pas claire ou non support√©e, retourne :\n"
                    "{\n"
                    '  "action": "incompris",\n'
                    '  "message": "explication"\n'
                    "}\n\n"
                    "‚ö†Ô∏è IMPORTANT : Retourne UNIQUEMENT le JSON, sans pr√©fixe 'json', sans backticks, sans texte avant ou apr√®s."
                )
                
                try:
                    st.write("üîç **DEBUG :** Envoi de la demande √† l'IA...")
                    response = client.chat.completions.create(
                        model="gpt-4o",
                        messages=[
                            {"role": "system", "content": system_prompt_raffinage},
                            {"role": "user", "content": raffinage_query}
                        ]
                    )
                    raw_response = response.choices[0].message.content.strip()
                    st.write(f"üîç **DEBUG :** R√©ponse brute de l'IA : {raw_response}")
                    
                    # Nettoyer la r√©ponse pour enlever les pr√©fixes comme "json "
                    cleaned_response = raw_response
                    if raw_response.startswith("json "):
                        cleaned_response = raw_response[5:]  # Enlever "json "
                    elif raw_response.startswith("```json"):
                        cleaned_response = raw_response.replace("```json", "").replace("```", "").strip()
                    elif raw_response.startswith("```"):
                        cleaned_response = raw_response.replace("```", "").strip()
                    
                    st.write(f"üîç **DEBUG :** R√©ponse nettoy√©e : {cleaned_response}")
                    raffinage_instruction = json.loads(cleaned_response)
                    st.write(f"üîç **DEBUG :** Instruction pars√©e : {raffinage_instruction}")
                    
                    # --- Normalisation des instructions IA (s√©ance(s) -> salle(s)) ---
                    def normaliser_instruction_ia(instr):
                        # Si l'action ou les champs contiennent 's√©ance', on les remplace par 'salle'
                        if 'action' in instr and isinstance(instr['action'], str):
                            instr['action'] = instr['action'].replace('s√©ance', 'salle').replace('s√©ances', 'salles')
                        if 'critere' in instr and isinstance(instr['critere'], str):
                            instr['critere'] = instr['critere'].replace('s√©ance', 'salle').replace('s√©ances', 'salles')
                        # Si le champ nombre est pr√©sent, s'assurer que c'est un int
                        if 'nombre' in instr:
                            try:
                                instr['nombre'] = int(instr['nombre'])
                            except Exception:
                                instr['nombre'] = 1
                        return instr
                    raffinage_instruction = normaliser_instruction_ia(raffinage_instruction)
                    
                    # Application des modifications
                    modifications_appliquees = False
                    st.write(f"üîç **DEBUG :** Action d√©tect√©e : {raffinage_instruction.get('action')}")
                    
                    if raffinage_instruction.get("action") == "ajouter":
                        localisation = raffinage_instruction.get("localisation")
                        nombre = raffinage_instruction.get("nombre", 1)
                        st.write(f"üîç **DEBUG :** Ajout - Localisation : '{localisation}', Nombre : {nombre}")
                        
                        # Validation des donn√©es
                        validation_ok = True
                        if not localisation:
                            st.error("‚ùå Localisation manquante dans la demande d'ajout")
                            validation_ok = False
                        
                        if validation_ok:
                            try:
                                nombre = int(nombre)
                                if nombre <= 0:
                                    st.error("‚ùå Le nombre de salles doit √™tre positif")
                                    validation_ok = False
                            except (ValueError, TypeError):
                                st.error("‚ùå Nombre de salles invalide")
                                validation_ok = False
                        
                        if validation_ok:
                            st.write(f"üîç **DEBUG :** Validation OK, recherche du groupe existant...")
                            # Trouver le groupe existant ou en cr√©er un nouveau
                            groupe_existant = None
                            for groupe in st.session_state.liste_groupes_resultats:
                                st.write(f"üîç **DEBUG :** Comparaison : '{normaliser_nom_ville(groupe['localisation'])}' vs '{normaliser_nom_ville(localisation)}'")
                                if normaliser_nom_ville(groupe["localisation"]) == normaliser_nom_ville(localisation):
                                    groupe_existant = groupe
                                    st.write(f"üîç **DEBUG :** Groupe existant trouv√© pour {localisation}")
                                    break
                            
                            if groupe_existant:
                                st.write(f"üîç **DEBUG :** Ajout au groupe existant pour {localisation}")
                                # Ajouter des salles au groupe existant
                                rayon_actuel = 100  # rayon augment√© pour plus de flexibilit√©
                                st.write(f"üîç **DEBUG :** Recherche de {nombre * 2} salles suppl√©mentaires dans un rayon de {rayon_actuel} km")
                                resultats_supplementaires = trouver_cinemas_proches(
                                    localisation, 
                                    1000,  # objectif spectateurs par d√©faut
                                    nombre * 2,  # chercher plus pour avoir du choix
                                    rayon_actuel
                                )
                                st.write(f"üîç **DEBUG :** {len(resultats_supplementaires)} salles suppl√©mentaires trouv√©es")
                                
                                # Filtrer pour √©viter les doublons (plus robuste)
                                salles_existantes = set()
                                for c in groupe_existant["resultats"]:
                                    # Cr√©er un identifiant unique bas√© sur plusieurs crit√®res
                                    identifiant = f"{c['cinema']}_{c['salle']}_{c.get('adresse', '')}"
                                    salles_existantes.add(identifiant.lower())
                                st.write(f"üîç **DEBUG :** {len(salles_existantes)} salles existantes identifi√©es")
                                
                                nouvelles_salles = []
                                for s in resultats_supplementaires:
                                    identifiant = f"{s['cinema']}_{s['salle']}_{s.get('adresse', '')}"
                                    if identifiant.lower() not in salles_existantes:
                                        nouvelles_salles.append(s)
                                        st.write(f"üîç **DEBUG :** Nouvelle salle ajout√©e : {s['cinema']} - {s['salle']}")
                                        if len(nouvelles_salles) >= nombre:
                                            break
                                st.write(f"üîç **DEBUG :** {len(nouvelles_salles)} nouvelles salles uniques trouv√©es")
                                
                                if nouvelles_salles:
                                    st.write(f"üîç **DEBUG :** Ajout de {len(nouvelles_salles)} salles au groupe existant")
                                    groupe_existant["resultats"].extend(nouvelles_salles)
                                    groupe_existant["nombre_salles_demandees"] += len(nouvelles_salles)
                                    modifications_appliquees = True
                                    st.success(f"‚úÖ {len(nouvelles_salles)} nouvelle(s) salle(s) ajout√©e(s) √† {localisation}")
                                    
                                    # Mettre √† jour le dataframe d'export
                                    if localisation in st.session_state.dataframes_to_export:
                                        df_existant = st.session_state.dataframes_to_export[localisation]
                                        for salle in nouvelles_salles:
                                            contact = salle.get("contact", {})
                                            nouvelle_ligne = {
                                                "Cin√©ma": salle.get("cinema", "N/A"),
                                                "Salle": salle.get("salle", "N/A"),
                                                "Adresse": salle.get("adresse", "N/A"),
                                                "Capacit√©": salle.get("capacite", 0),
                                                "Distance (km)": salle.get("distance_km", 0),
                                                "Contact": " / ".join(filter(None, [
                                                    contact.get("nom", ""),
                                                    contact.get("email", ""),
                                                    contact.get("telephone", "")
                                                ])),
                                                "Latitude": salle.get("lat", 0.0),
                                                "Longitude": salle.get("lon", 0.0)
                                            }
                                            df_existant = pd.concat([df_existant, pd.DataFrame([nouvelle_ligne])], ignore_index=True)
                                        st.session_state.dataframes_to_export[localisation] = df_existant
                                else:
                                    st.warning(f"‚ö†Ô∏è Aucune nouvelle salle trouv√©e pour {localisation}")
                            else:
                                st.write(f"üîç **DEBUG :** Cr√©ation d'un nouveau groupe pour {localisation}")
                                # Cr√©er un nouveau groupe
                                resultats_nouveaux = trouver_cinemas_proches(
                                    localisation,
                                    1000,
                                    nombre,
                                    100  # rayon plus large pour les nouveaux groupes
                                )
                                st.write(f"üîç **DEBUG :** {len(resultats_nouveaux)} salles trouv√©es pour le nouveau groupe")
                                if resultats_nouveaux:
                                    nouveau_groupe = {
                                        "localisation": localisation,
                                        "resultats": resultats_nouveaux,
                                        "nombre_salles_demandees": len(resultats_nouveaux)
                                    }
                                    st.session_state.liste_groupes_resultats.append(nouveau_groupe)
                                    modifications_appliquees = True
                                    st.success(f"‚úÖ Nouveau groupe cr√©√© pour {localisation} avec {len(resultats_nouveaux)} salle(s)")
                                    
                                    # Cr√©er le dataframe d'export
                                    data_for_df = []
                                    for cinema in resultats_nouveaux:
                                        contact = cinema.get("contact", {})
                                        data_for_df.append({
                                            "Cin√©ma": cinema.get("cinema", "N/A"),
                                            "Salle": cinema.get("salle", "N/A"),
                                            "Adresse": cinema.get("adresse", "N/A"),
                                            "Capacit√©": cinema.get("capacite", 0),
                                            "Distance (km)": cinema.get("distance_km", 0),
                                            "Contact": " / ".join(filter(None, [
                                                contact.get("nom", ""),
                                                contact.get("email", ""),
                                                contact.get("telephone", "")
                                            ])),
                                            "Latitude": cinema.get("lat", 0.0),
                                            "Longitude": cinema.get("lon", 0.0)
                                        })
                                    st.session_state.dataframes_to_export[localisation] = pd.DataFrame(data_for_df)
                                else:
                                    st.warning(f"‚ö†Ô∏è Aucune salle trouv√©e pour {localisation}")
                    
                    elif raffinage_instruction.get("action") == "supprimer":
                        critere = raffinage_instruction.get("critere")
                        valeur = raffinage_instruction.get("valeur")
                        operateur = raffinage_instruction.get("operateur", "inferieur")
                        localisation = raffinage_instruction.get("localisation")
                        st.write(f"üîç **DEBUG :** Suppression - Crit√®re : '{critere}', Valeur : {valeur}, Op√©rateur : '{operateur}', Localisation : '{localisation}'")

                        # Cas sp√©cial : suppression de toutes les salles d'une localisation
                        if localisation and not critere:
                            groupes_supprimes = 0
                            for groupe in st.session_state.liste_groupes_resultats:
                                if groupe["localisation"].lower() == localisation.lower():
                                    nb_salles = len(groupe["resultats"])
                                    groupe["resultats"] = []
                                    groupes_supprimes += nb_salles
                                    st.write(f"üîç **DEBUG :** Toutes les salles supprim√©es pour {localisation} ({nb_salles} salles)")
                                    # Mettre √† jour le dataframe d'export
                                    if localisation in st.session_state.dataframes_to_export:
                                        st.session_state.dataframes_to_export[localisation] = st.session_state.dataframes_to_export[localisation].iloc[0:0]
                            if groupes_supprimes > 0:
                                modifications_appliquees = True
                                st.success(f"‚úÖ Toutes les salles supprim√©es pour {localisation} ({groupes_supprimes} salles)")
                            else:
                                st.info(f"‚ÑπÔ∏è Aucune salle √† supprimer pour {localisation}")
                        else:
                            # Validation des donn√©es
                            validation_ok = True
                            if not critere or valeur is None:
                                st.error("‚ùå Crit√®re ou valeur manquant pour la suppression")
                                validation_ok = False
                            if validation_ok:
                                try:
                                    valeur = float(valeur)
                                except (ValueError, TypeError):
                                    st.error("‚ùå Valeur num√©rique invalide pour le crit√®re")
                                    validation_ok = False
                            if validation_ok and critere and valeur is not None:
                                st.write(f"üîç **DEBUG :** Validation OK, d√©but de la suppression...")
                                salles_supprimees = 0
                                for groupe in st.session_state.liste_groupes_resultats:
                                    resultats_originaux = groupe["resultats"].copy()
                                    st.write(f"üîç **DEBUG :** Traitement du groupe {groupe['localisation']} : {len(resultats_originaux)} salles avant filtrage")
                                    # Logique de filtrage am√©lior√©e avec op√©rateurs
                                    if critere == "capacite_min":
                                        if operateur == "inferieur":
                                            groupe["resultats"] = [s for s in resultats_originaux if s.get("capacite", 0) >= valeur]
                                        elif operateur == "superieur":
                                            groupe["resultats"] = [s for s in resultats_originaux if s.get("capacite", 0) <= valeur]
                                        else:  # egal
                                            groupe["resultats"] = [s for s in resultats_originaux if s.get("capacite", 0) == valeur]
                                    elif critere == "capacite_max":
                                        if operateur == "inferieur":
                                            groupe["resultats"] = [s for s in resultats_originaux if s.get("capacite", 0) <= valeur]
                                        elif operateur == "superieur":
                                            groupe["resultats"] = [s for s in resultats_originaux if s.get("capacite", 0) >= valeur]
                                        else:  # egal
                                            groupe["resultats"] = [s for s in resultats_originaux if s.get("capacite", 0) == valeur]
                                    elif critere == "distance_max":
                                        if operateur == "inferieur":
                                            groupe["resultats"] = [s for s in resultats_originaux if s.get("distance_km", 0) <= valeur]
                                        elif operateur == "superieur":
                                            groupe["resultats"] = [s for s in resultats_originaux if s.get("distance_km", 0) >= valeur]
                                        else:  # egal
                                            groupe["resultats"] = [s for s in resultats_originaux if s.get("distance_km", 0) == valeur]
                                    salles_supprimees_groupe = len(resultats_originaux) - len(groupe["resultats"])
                                    salles_supprimees += salles_supprimees_groupe
                                    st.write(f"üîç **DEBUG :** Groupe {groupe['localisation']} : {salles_supprimees_groupe} salles supprim√©es, {len(groupe['resultats'])} restantes")
                                    # Mettre √† jour le dataframe d'export
                                    if groupe["localisation"] in st.session_state.dataframes_to_export:
                                        # Recr√©er le dataframe avec les nouvelles donn√©es
                                        data_for_df = []
                                        for cinema in groupe["resultats"]:
                                            contact = cinema.get("contact", {})
                                            data_for_df.append({
                                                "Cin√©ma": cinema.get("cinema", "N/A"),
                                                "Salle": cinema.get("salle", "N/A"),
                                                "Adresse": cinema.get("adresse", "N/A"),
                                                "Capacit√©": cinema.get("capacite", 0),
                                                "Distance (km)": cinema.get("distance_km", 0),
                                                "Contact": " / ".join(filter(None, [
                                                    contact.get("nom", ""),
                                                    contact.get("email", ""),
                                                    contact.get("telephone", "")
                                                ])),
                                                "Latitude": cinema.get("lat", 0.0),
                                                "Longitude": cinema.get("lon", 0.0)
                                            })
                                        st.session_state.dataframes_to_export[groupe["localisation"]] = pd.DataFrame(data_for_df)
                                if salles_supprimees > 0:
                                    modifications_appliquees = True
                                    st.success(f"‚úÖ {salles_supprimees} salle(s) supprim√©e(s) selon le crit√®re : {critere} {operateur} {valeur}")
                                else:
                                    st.info("‚ÑπÔ∏è Aucune salle ne correspondait aux crit√®res de suppression")
                    
                    elif raffinage_instruction.get("action") == "incompris":
                        st.warning(f"‚ö†Ô∏è Demande non comprise : {raffinage_instruction.get('message', 'Format non reconnu')}")
                        st.info("üí° Exemples de demandes support√©es :\n- 'rajoute une salle √† Marseille'\n- 'supprime les salles de moins de 100 places'\n- 'ajoute 2 salles √† Paris'")
                    
                    else:
                        st.warning("‚ö†Ô∏è Type d'action non support√©")
                    
                    # Forcer la mise √† jour de l'interface si des modifications ont √©t√© appliqu√©es
                    if modifications_appliquees:
                        st.write(f"üîç **DEBUG :** Modifications appliqu√©es, mise √† jour de l'interface...")
                        st.session_state.modifications_appliquees = True
                        st.success("üîÑ Interface mise √† jour avec les nouvelles donn√©es")
                    else:
                        st.write(f"üîç **DEBUG :** Aucune modification appliqu√©e")
                        
                except json.JSONDecodeError as e:
                    st.error(f"‚ùå Erreur JSON lors de l'analyse de la demande de modification : {e}")
                    st.write(f"üîç **DEBUG :** R√©ponse qui a caus√© l'erreur : {raw_response}")
                except Exception as e:
                    st.error(f"‚ùå Erreur inattendue : {e}")
                    st.write(f"üîç **DEBUG :** Type d'erreur : {type(e).__name__}")
            
            st.rerun()
        else:
            st.warning("Veuillez saisir une demande de modification.")
    
    # Affichage des exemples de raffinage
    with st.expander("üí° Exemples de demandes de raffinage", expanded=False):
        st.markdown("""
        **Ajouter des salles :**
        - "rajoute une salle √† Marseille"
        - "ajoute 2 salles √† Paris"
        - "ajoute une salle √† Lyon"
        
        **Supprimer des salles :**
        - "supprime les salles de moins de 100 places"
        - "enl√®ve les salles √† plus de 30 km"
        - "supprime les salles de plus de 200 places"
        
        **Modifier des crit√®res :**
        - "augmente le rayon √† 100 km pour Paris"
        - "cherche des salles de plus de 150 places"
        """)
    
    # Affichage des r√©sultats mis √† jour apr√®s raffinage
    # Cette section ne s'affiche que si des modifications ont √©t√© appliqu√©es
    if st.session_state.liste_groupes_resultats and st.session_state.get('modifications_appliquees', False):
        st.markdown("---")
        st.subheader("üìä R√©sultats Mis √† Jour")
        
        total_seances_apres_raffinage = sum(groupe.get("nombre_salles_demandees", 0) for groupe in st.session_state.liste_groupes_resultats)
        cinemas_trouves_apres_raffinage = sum(len(groupe.get("resultats", [])) for groupe in st.session_state.liste_groupes_resultats)
        
        st.info(f"üìà **Total apr√®s raffinage :** {cinemas_trouves_apres_raffinage} salle(s) trouv√©e(s) sur {total_seances_apres_raffinage} s√©ance(s) vis√©e(s)")
        
        # Carte mise √† jour
        st.subheader("üó∫Ô∏è Carte Mise √† Jour")
        carte_mise_a_jour = generer_carte_folium(st.session_state.liste_groupes_resultats)
        if carte_mise_a_jour:
            map_html_path = "map_output_raffinage.html"
            carte_mise_a_jour.save(map_html_path)
            st_folium(carte_mise_a_jour, width='100%', height=500, key="carte_raffinage")
            with open(map_html_path, "rb") as f:
                st.download_button("üì• T√©l√©charger la Carte Mise √† Jour (HTML)", f, "carte_cinemas_raffinage.html", "text/html", use_container_width=True, key="download_carte_raffinage")
        
        # Tableaux mis √† jour
        st.subheader("üìã Tableaux Mis √† Jour")
        if st.session_state.dataframes_to_export:
            excel_buffer_raffinage = io.BytesIO()
            with pd.ExcelWriter(excel_buffer_raffinage, engine='xlsxwriter') as writer:
                for loc, df_to_write in st.session_state.dataframes_to_export.items():
                    safe_sheet_name = "".join(c for c in loc if c.isalnum() or c in (' ', '_')).rstrip()[:31]
                    df_to_write.to_excel(writer, sheet_name=safe_sheet_name, index=False)
            st.download_button(
                label="üíæ T√©l√©charger R√©sultats Mis √† Jour (Excel)",
                data=excel_buffer_raffinage.getvalue(),
                file_name=f"resultats_cinemas_raffinage_{uuid.uuid4()}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True, key="download_raffinage_excel"
            )
        
        # Affichage des tableaux par zone
        for groupe in st.session_state.liste_groupes_resultats:
            loc = groupe["localisation"]
            nb_demandes = groupe["nombre_salles_demandees"]
            nb_trouves = len(groupe["resultats"])
            st.markdown(f"**Zone : {loc}** ({nb_trouves}/{nb_demandes} salles trouv√©es)")
            if loc in st.session_state.dataframes_to_export:
                df_display = st.session_state.dataframes_to_export[loc]
                st.dataframe(df_display[["Cin√©ma", "Salle", "Capacit√©", "Distance (km)", "Contact"]], use_container_width=True, hide_index=True)
            elif nb_trouves == 0:
                st.caption("Aucune salle trouv√©e pour cette zone.")
            st.divider()

# --- Fin de l'application ---